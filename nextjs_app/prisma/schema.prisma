// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           Int           @id @default(autoincrement())
  fullName     String        @map("full_name")
  email        String        @unique
  passwordHash String        @map("password_hash")
  createdAt    DateTime      @default(now()) @map("created_at")
  chatSessions ChatSession[]

  @@map("users")
}

model ChatSession {
  id          Int            @id @default(autoincrement())
  userId      Int            @map("user_id")
  sessionName String?        @map("session_name")
  startedAt   DateTime       @default(now()) @map("started_at")
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]
  files       UploadedFile[]

  @@map("chat_sessions")
}

model ChatMessage {
  id        Int         @id @default(autoincrement())
  sessionId Int         @map("session_id")
  sender    Sender
  message   String      
  createdAt DateTime    @default(now()) @map("created_at")
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum Sender {
  user
  bot
}

model UploadedFile {
  id         Int         @id @default(autoincrement())
  sessionId  Int         @map("session_id")
  fileName   String      @map("file_name")
  filePath   String      @map("file_path")
  uploadedAt DateTime    @default(now()) @map("uploaded_at")
  session    ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("uploaded_files")
}

model LegalNews {
  id          Int      @id @default(autoincrement())
  title       String   
  content     String   
  publishedAt DateTime @default(now()) @map("published_at")

  @@map("legal_news")
}
